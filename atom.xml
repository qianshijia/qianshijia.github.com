<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eric's Blog]]></title>
  <link href="http://erica.im/atom.xml" rel="self"/>
  <link href="http://erica.im/"/>
  <updated>2012-09-22T13:24:42+10:00</updated>
  <id>http://erica.im/</id>
  <author>
    <name><![CDATA[Eric]]></name>
    <email><![CDATA[qian.shijia@gamil.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简单的UIView Animation]]></title>
    <link href="http://erica.im/blog/2012/09/22/uiview-animation/"/>
    <updated>2012-09-22T12:33:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/22/uiview-animation</id>
    <content type="html"><![CDATA[<p>好几天没更新了，最近一直在学iOS的Quartz2D以及Animation。今天就来分享一下我的学习成果，基于UIView的动画是最简单易学的，一般一天的学习就能作出非常漂亮的动画了。接下来正式开始今天的内容。<br/>
先来简单介绍一下今天要实现的效果，我们要让一个小瓢虫在屏幕上转圈，并且在每次拐弯的时候把头转向要拐过去的方向。<br/>
<img src="http://erica.im/images/UIView_Animation/homescreen.jpg"><br/>
首先新建一个SingleView的工程。然后拖一个Button和一个UIImageView到MainStoryboard。然后在ViewController.h里添加一下代码。</p>

<pre><code>@property (nonatomic, strong) UIImageView *bug;
@property (nonatomic, strong) IBOutlet UIButton *startBtn;

-(IBAction)startAnimation;
</code></pre>

<p>然后在MainStoryboard里把这两个属性和IBAction联接到相应的控件。<br/>
接着下来我们开始做动画。第一步，要让小瓢虫掉个头（转180度）,方法如下：</p>

<pre><code>- (void)faceRight:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:1.0];//设置动画持续时间
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];//设置动画的样式
    [UIView setAnimationDelegate:self];//设置代理，只有设置了代理下面那个方法才能在动画结束时被调用
    [UIView setAnimationDidStopSelector:@selector(moveRight:finished:context:)];//动画结束时调用moveRight方法
    bug.transform = CGAffineTransformMakeRotation(M_PI);//通过对象的transform属性来设置动画，在这里我们要让对象旋转180度即一个PI
    [UIView commitAnimations];//提交动画
}
</code></pre>

<p>怎么样，代码并不复杂吧。然后我们在IBAction里面添加</p>

<pre><code>- (IBAction)startAnimation
{
    [self faceRight:nil finished:nil context:nil];
}
</code></pre>

<p>运行工程，然后点击按钮测试一下效果。下一步，我们要让小虫从当前位置移动到屏幕的右边。</p>

<pre><code>- (void)moveRight:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:2.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(faceDown:finished:context:)];
    bug.center = CGPointMake(260, bugCenter.y);//改变对象的位置，通过center属性来改变
    [UIView commitAnimations];
}
</code></pre>

<p>这个方法也没什么好解释的。接下去的几个方法都是依样画葫芦：</p>

<pre><code>- (void)faceDown:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:1.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(moveDown:finished:context:)];
    bug.transform = CGAffineTransformMakeRotation(-M_PI_2);
    [UIView commitAnimations];
}

- (void)moveDown:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:2.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(faceLeft:finished:context:)];
    bug.center = CGPointMake(260, 97 + 200);
    [UIView commitAnimations];
}

- (void)faceLeft:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:1.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(moveLeft:finished:context:)];
    bug.transform = CGAffineTransformMakeRotation(0);
    [UIView commitAnimations];
}

- (void)moveLeft:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:2.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(faceTop:finished:context:)];
    bug.center = CGPointMake(bugCenter.x, 297);
    [UIView commitAnimations];
}

- (void)faceTop:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:1.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(moveTop:finished:context:)];
    bug.transform = CGAffineTransformMakeRotation(M_PI_2);
    [UIView commitAnimations];
}

- (void)moveTop:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context
{
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:2.0];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDidStopSelector:@selector(faceRight:finished:context:)];
    bug.center = bugCenter;
    [UIView commitAnimations];
}
</code></pre>

<p>然后我们运行测试一下，我们会发现刚开始的掉头和移动到右边没什么问题但是后面一个转头朝下的动画就有问题。小虫子在转得的时候又会回到出发点。这是什么原因呢，我也是在这个问题上纠缠了好久，后来才发现虽然我们给小虫子设置了IBOutlet，但是我们并不能通过bug.center来得到小虫的位置（总是返回（0，0））。我觉得这可能是使用了MainStoryboard的问题（具体原因我还在搜索中），于是我就在ViewDidLoad里添加如下代码，手动给小虫子定位。</p>

<pre><code>- (void)viewDidLoad
{
    self.bug = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"bug.png"]];
    self.bug.frame = CGRectMake(30,30, 90, 75);
    [self.view addSubview:self.bug];
    bugCenter = bug.center;
    [super viewDidLoad];
}
</code></pre>

<p>然后再运行一下就没有什么问题了。总结一下，UIViewAnimation很简单易用。只要记住在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间添加配置代码以及动画代码就行了。最后祝大家都能作出漂亮的动画效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[City随拍]]></title>
    <link href="http://erica.im/blog/2012/09/14/day-trip/"/>
    <updated>2012-09-14T14:41:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/14/day-trip</id>
    <content type="html"><![CDATA[<p>今天去国家艺术馆看拿破仑时期的艺术品展览。发一些一路上拍的照片<br/>
<img src="http://erica.im/images/day_trip/dt1.jpg"><br/>
<img src="http://erica.im/images/day_trip/dt2.jpg">
<img src="http://erica.im/images/day_trip/dt3.jpg"><br/>
圣保罗大教堂<br/>
<img src="http://erica.im/images/day_trip/dt4.jpg">
<img src="http://erica.im/images/day_trip/dt5.jpg">
<img src="http://erica.im/images/day_trip/dt6.jpg">
<img src="http://erica.im/images/day_trip/dt7.jpg">
<img src="http://erica.im/images/day_trip/dt8.jpg">
<img src="http://erica.im/images/day_trip/dt9.jpg"><br/>
世界上最高的居民住宅楼88层<br/>
<img src="http://erica.im/images/day_trip/dt10.jpg"><br/>
墨尔本的母亲河，雅拉河畔
<img src="http://erica.im/images/day_trip/dt11.jpg">
国家艺术馆<br/>
<img src="http://erica.im/images/day_trip/dt12.jpg">
<img src="http://erica.im/images/day_trip/dt13.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData学习笔记]]></title>
    <link href="http://erica.im/blog/2012/09/13/learning-coredata/"/>
    <updated>2012-09-13T20:22:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/13/learning-coredata</id>
    <content type="html"><![CDATA[<p>最近一段时间一直忙着投简历，主要方向当然是iOS的开发。在看了不下30家的招聘公司的要求之后，发现很多都要求应聘者了解或者掌握CoreData。所以今天就来学习下CoreData基础。我会用一个简单的project来介绍CoreData的基础知识。废话不多说，现在开始。<br/>
CoreData是为开发者提供的一种简单稳定的数据存储和读取的接口。相比起sqlite 3，它能使代码更简洁，运行效率更高。我们今天做的这个项目很简单，就是有这么两张表，第一章表叫StudentInfo，包含了学生姓名，年龄，性别，以及住址。第二章表叫AddressDetails，包含了街道名，城市名，省，和邮编。应该有人已经能看出来，这张表就是对应着第一张表里的住址。所以这两张表是一对一的关系。好了，如果我们用数据库的话，第一步肯定就是建表啦，然后还要敲一大堆SQL代码。我最烦SQL代码，因为很容易打错，尤其是语句很长的时候。CoreData就很好的帮我们解决了这个问题。请看：<br/>
第一步还是新建工程，为了方便我们这里直接选择Master-Detail Applications。项目名称就叫StudentManagementSystem吧， Class Prefix输入SMS，然后device选iPhone。<br/>
<img src="http://erica.im/images/learning_coredata/newproj.jpg"><br/>
注意下面的方框要勾选前面三个：Use Storyboards, Use Core Data, Use Automatic Reference Counting。<br/>
<img src="http://erica.im/images/learning_coredata/projdetail.jpg"><br/>
接下来我们要先对工程做一些修改。首先删除以下4个文件，直接选择move to trash：</p>

<ul>
<li>SMSMasterViewController.h</li>
<li>SMSMasterViewController.m</li>
<li>SMSDetailViewController.h</li>
<li>SMSDetailViewController.m</li>
</ul>


<p>然后新建一个文件叫SMSMasterViewController，subclass选择UITableViewController，注意下面两个选项都不要勾选，然后确定。<br/>
<img src="http://erica.im/images/learning_coredata/masterview.jpg"><br/>
在SMSMasterViewController.h里添加一个属性：</p>

<pre><code>@property (nanotomic,strong) NSManagedObjectContext *managedObjectContext;
</code></pre>

<p>并且在.m里synthesize这个属性。接下去到MainStoryboard里选中DetailViewController并按Delete键删除。<br/>
好了现在打开SMSAppDelegate.h文件我们先来熟悉一些概念。可以看到上面有三个属性，类名分别是：</p>

<ul>
<li>NSManagedObjectContext</li>
<li>NSManagedObjectModel</li>
<li>NSPersistentStoreCoordinator</li>
</ul>


<p>简单介绍下这三个类是什么：</p>

<ul>
<li><em>NSManagedObjectContext</em>：相当于一张便签纸，把我们从数据库获取的所有objects记录在上面。我们编程的时候和这个类的对象打的交道最多，因为我们必须通过它来进行数据的插入，删除和修改等操作。</li>
<li><em>NSManagedObjectModel</em>：顾名思义，它代表了数据库里存储的数据的结构。它定义了存储数据包含了哪些属性，以及与其他数据之间的关系。xCode提供了一种很方便的可视化操作来设置这些结构。</li>
<li><em>NSPersistentStoreCoordinator</em>：它负责建立与数据库的联接。</li>
</ul>


<p>我们下面就来看看xCode提供给我们的可视化编辑器，用来方便快捷的编辑我们想要的NSManagedObjectModel。在左边的工程目录里找到StudentManagementSystem.xcdatamodeld，点击它，并且在左下角的Editor Style里选到右边的那个选项。<br/>
<img src="http://erica.im/images/learning_coredata/editor.jpg"><br/>
我们先点选可视化编辑框里的那个已经存在的Entity，然后把它删掉。接下去我们一步步来添加一个Entity。点击Add Entity，然后命名为StudentInfo。<br/>
<img src="http://erica.im/images/learning_coredata/addentity.jpg"><br/>
我们可以看到它包含了attributes和relationship两栏。接下来我们给它添加attributes，在图形化界面中选中这个Entity并且点击Add Attribute不放，在弹出菜单里选择Add Attribute。<br/>
<img src="http://erica.im/images/learning_coredata/addattr.jpg">
然后在图形界面里选中我们刚创建的Attribute，在右边的编辑区域里把Name改成name，把Attribute Type改成string。接着用同样的方法创建age和gender，注意age的type我们用Integer32。
<img src="http://erica.im/images/learning_coredata/nameattr.jpg"><br/>
属性添加完毕后，接着依样画葫芦把另一个Entity，AddressDetails也创建好。完成后屏幕上应该是这样：<br/>
<img src="http://erica.im/images/learning_coredata/attrdone.jpg"><br/>
开头我们就说了，这两个entity（表）之间是一对一的关系，接下来我们就来创建这种关系。选中StudentInfo，点击Add Attribute不放，在弹出菜单里选择Add Relationship。把这个relationship改名为address，并且Destination选择AddressDetails。然后，因为苹果建议我们每当创建一个relationship的同时创建一个反向的relationship。选中AddressDetails添加Relationship改名为studentinfo，destination为StudentInfo，然后Inverse选择我们刚创建的address。完成后界面就是这样的：<br/>
<img src="http://erica.im/images/learning_coredata/reladone.jpg"><br/>
下面一步，我们从测试中来学习CoreData的工作机制。首先我们添加几条数据，在AppDelegate里的application:didFinishLaunchingWithOptions方法里添加如下代码：</p>

<pre><code>NSManagedObjectContext *context = self.managedObjectContext;
//创建NSManagedObject对象指向StudentInfo这个Entity，并设置Value。
NSManagedObject *studentInfo = [NSEntityDescription insertNewObjectForEntityForName:@"StudentInfo" inManagedObjectContext:context];
[studentInfo setValue:@"Eric" forKey:@"name"];
[studentInfo setValue:[NSNumber numberWithInt:25] forKey:@"age"];
[studentInfo setValue:@"male" forKey:@"gender"];

//创建NSManagedObject对象指向AddressDetails这个Entity，并设置Value。
NSManagedObject *addressDetails = [NSEntityDescription insertNewObjectForEntityForName:@"AddressDetails" inManagedObjectContext:context];
[addressDetails setValue:@"507/909 Swanston St." forKey:@"street"];
[addressDetails setValue:@"Melbourne" forKey:@"city"];
[addressDetails setValue:@"Victoria" forKey:@"state"];
[addressDetails setValue:[NSNumber numberWithInt:3053] forKey:@"zip"];

//添加两个对象之间的关系
[studentInfo setValue:addressDetails forKey:@"address"];
[addressDetails setValue:studentInfo forKey:@"studentinfo"];

//保存所创建的对象
NSError *error;
if(![context save:&amp;error])
{
    NSLog(@"Couldn't save: %@", [error localizedDescription]);
}
</code></pre>

<p>然后紧接着我们来测试一下是否能获取到刚才添加的这些值。接着刚才的代码往下写：</p>

<pre><code>NSFetchRequest *fetechRequest = [[NSFetchRequest alloc] init];
NSEntityDescription *entity = [NSEntityDescription entityForName:@"StudentInfo" inManagedObjectContext:context];
[fetechRequest setEntity:entity];
NSArray *fetechedResults = [context executeFetchRequest:fetechRequest error:&amp;error];
for(NSManagedObject *stuInfo in fetechedResults)
{
    NSLog(@"Name:%@", [stuInfo valueForKey:@"name"]);
    NSLog(@"age:%@", [stuInfo valueForKey:@"age"]);
    NSManagedObject *address = [stuInfo valueForKey:@"address"];
    NSLog(@"City:%@", [address valueForKey:@"city"]);
    NSLog(@"Zip:%@", [address valueForKey:@"zip"]);
}
</code></pre>

<p>阅读上面的代码我们可以发现，我们不仅能获取到StudentInfo这个Entity里的值还能通过我们刚才创建的relationship，获取AddressDetails这个Entity，非常的方便。接下来我们运行一下看看结果，注意这时候模拟器上不会有任何的显示，我们要看Log里的输出。OK，结果正确。<br/>
<img src="http://erica.im/images/learning_coredata/result1.jpg"><br/>
到目前为止，我们用的都是NSManagedObject的对象来描述我们的Entity，其实还有一个更好的办法就是为每个Entity创建Model。xCode同样提供了非常方便的方法来达到这个目的。回到StudentManagementSystem.xcdatamodeld，选中StudentInfo这个Entity然后在顶上的菜单栏里选择File->New File->Core Data->NSManagedObject subclass。然后确定，xCode就为我们创建好了一个Model。重复同样的步骤为AddressInfo也创建Model。<br/>
<img src="http://erica.im/images/learning_coredata/simodel.jpg"> <br/>
接下来找到StudentInfo.h我们发现里面有个property还是NSManagedObject对象，这是因为我们在创建StudentInfo这个Model的时候AddressDetails这个Model还不存在，所以系统不知道它的类型，只能把它归为NSManagedObject的对象。很简单，我们重新创建一个StudentInfo的Model并且覆盖原来的就可以了。<br/>
接下来我们把刚才上面贴的两段代码改成下面的：</p>

<pre><code>NSManagedObjectContext *context = self.managedObjectContext;
//创建NSManagedObject对象指向StudentInfo这个Entity，并设置Value。
StudentInfo *studentInfo = [NSEntityDescription insertNewObjectForEntityForName:@"StudentInfo" inManagedObjectContext:context];
studentInfo.name = @"Eric";
studentInfo.age = [NSNumber numberWithInt:25];
studentInfo.gender = @"male";

//创建NSManagedObject对象指向AddressDetails这个Entity，并设置Value。
AddressDetails *addressDetails = [NSEntityDescription insertNewObjectForEntityForName:@"AddressDetails" inManagedObjectContext:context];
addressDetails.street = @"507/909 Swanston St.";
addressDetails.city = @"Melbourne";
addressDetails.state = @"Victoria";
addressDetails.zip = [NSNumber numberWithInt:3053];

//添加两个对象之间的关系
studentInfo.address = addressDetails;
addressDetails.studentinfo = studentInfo;

//保存所创建的对象
NSError *error;
if(![context save:&amp;error])
{
    NSLog(@"Couldn't save: %@", [error localizedDescription]);
}

NSFetchRequest *fetechRequest = [[NSFetchRequest alloc] init];
NSEntityDescription *entity = [NSEntityDescription entityForName:@"StudentInfo" inManagedObjectContext:context];
[fetechRequest setEntity:entity];
NSArray *fetechedResults = [context executeFetchRequest:fetechRequest error:&amp;error];
for(StudentInfo *stuInfo in fetechedResults)
{
    NSLog(@"Name:%@", stuInfo.name);
    NSLog(@"age:%@", stuInfo.age);
    AddressDetails *address = studentInfo.address;
    NSLog(@"City:%@", address.city);
    NSLog(@"Zip:%@", address.zip);
}
</code></pre>

<p>接着运行下看看结果：<br/>
<img src="http://erica.im/images/learning_coredata/result2.jpg"><br/>
OK，两条输出，没有任何问题。接下来大家可以自己添加一个TableView的输出把数据库里的数据逐条显示在TableView里，这里我就不做了。今天的学习到此结束。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不平凡的一天]]></title>
    <link href="http://erica.im/blog/2012/09/12/one-day/"/>
    <updated>2012-09-12T21:11:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/12/one-day</id>
    <content type="html"><![CDATA[<p>今天一大早7点不到就起来，吃完早饭就出发。还好家里住的地段好，直接火车坐到sourthern cross然后坐skybus到机场。结果坑爹的事情来了，我订的10点航班取消了（发誓以后再也不坐Tiger的航班了，乘客少就取消），心里一阵紧张，还好后面的那一班航班有位置。然后立马要求给我改到11点50分那一班。时间算算非常紧张，在机场里一直坐立不安。结果飞机还晚点起飞，出了机场已经1点20分了，还有40分钟就要面试了。赶快出了机场就冲向火车站，到了面试的地方正好2点钟。面试过程很简单，就做一份卷子5道题，三道概念两道编程。概念题都是直接现场Google的，编程题就不说了，没啥大问题。做完后，公司的人问了我的期望薪水以及什么时候乐意开始工作，然后就说两天内就能给我答复。出来后感觉很不错，看他们的态度似乎对我挺感兴趣，哈哈。今天算是人生中的一个里程碑吧，就发张我在悉尼街头随手拍的“里程碑”。<br/>
<img src="http://erica.im/images/one_day/milestone.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的iPhone画板应用]]></title>
    <link href="http://erica.im/blog/2012/09/11/draw-pad-for-iphone/"/>
    <updated>2012-09-11T15:58:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/11/draw-pad-for-iphone</id>
    <content type="html"><![CDATA[<p>前天用HTML5和JS做了一个简单的网页版的画图程序，作为一个初级的iOS开发人员（自封的）今天就来实现iPhone上的简单画板应用。
第一步，打开xCode然后新建工程，这次我们选择SingleView Application模版，然后记得把Use Storyboards和Use Automatic Reference Counting两个选项勾上。
<img src="http://erica.im/images/my_drawpad/new.jpg"><br/>
工程新建完毕后，接下来打开Mainstoryboard。然后从右下角的控件栏里连续拖两个UIImageView放到View Controller里，大小设置成全屏。接着把底下的ImageView的名字改成Main ImageView，上面的ImageView名字改成Drawing ImageView以便区分。这里稍稍解释一下这两个ImageView的作用。Drawing ImageView是用来接受用户每一次在屏幕上的“输入”的（手指的滑动）。从用户点击屏幕开始到手指离开屏幕，这样就算是一次“输入”。然后这次“输入”的“内容”就会被画到下面那个Main ImageView上。所以下面的Main ImageView才是真正用来保存用户所画的东西的。
<img src="http://erica.im/images/my_drawpad/imageview.jpg"> <br/>
然后到ViewController.h里建立两个UIImageView的IBOutlet，并在Mainstoryboard里把这两个Outlet和刚才添加的两个UIImageView联接起来。<br/>
接下来第二步，我们开始设计主界面。我是这么设计的，所有的按钮都放置在屏幕底部，主要有这四个按钮：清除按钮&#8211;用来清楚之前画的所有内容，保存按钮&#8211;用来保存所画的图片，橡皮按钮，线条粗细选择按钮和颜色选择按钮。我把我用的<a href="http://erica.im/files/images.zip">图片</a>素材都打包了，大家可以直接下载来用。下面是我自己设计的界面以供参考，其中颜色选择和线条粗细选择按钮点击以后会弹出两个菜单供用户选择，实现方法后面介绍。<br/>
<img src="http://erica.im/images/my_drawpad/mainscreen1.jpg">
<img src="http://erica.im/images/my_drawpad/mainscreen2.jpg"><br/>
下面介绍弹出菜单的实现方法。我的实现方法是新建一个UIView然后把菜单里所有的Button添加到这个View里，然后再用addSubview把这个UIView添加到主界面。在这里我用了一个NSMutableDictionary&#8211;popoverDictionay来保存建好的UIView，这样每次我们点击按钮就不用重复建立UIView了。
<img src="http://erica.im/images/my_drawpad/popoverview.jpg"><br/>
接下来建立两个IBOutlet的UIButton连接到颜色选择和线条选择两个按钮，并建立两个IBAction然后联接到这两个按钮的TouchUpInside事件。下面的代码就是颜色选择按钮点击后的代码，线条按钮的代码类似。
<img src="http://erica.im/images/my_drawpad/colorpickbtn.jpg">
<img src="http://erica.im/images/my_drawpad/brushbtn.jpg"><br/>
然后我们要给每个按钮添加点击事件。<br/>
<img src="http://erica.im/images/my_drawpad/colorpressed.jpg"> <br/>
每次我们点击弹出菜单的按钮时要做如下操作：（1）设置相关的参数，比如R,G,B的值，线条粗细的值；(2)把菜单按钮的背景改成我们刚选择的按钮的背景。所以我们首先要声明一些成员变量并且在ViewDidLoad里初始化：<br/>
<img src="http://erica.im/images/my_drawpad/attributes.jpg">
<img src="http://erica.im/images/my_drawpad/init_attr.jpg"><br/>
接下来是按钮点击的方法实现：</p>

<pre><code>- (void)colorPressed:(id)sender
{

UIButton *btn = (UIButton *)sender;
switch (btn.tag) 
{
    case 0:
        red = 255.0 / 255.0;
        green = 0.0 / 255.0;
        blue = 0.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 1:
        red = 0.0 / 255.0;
        green = 255.0 / 255.0;
        blue = 0.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 2:
        red = 0.0 / 255.0;
        green = 0.0 / 255.0;
        blue = 255.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 3:
        red = 255.0 / 255.0;
        green = 0.0 / 255.0;
        blue = 255.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 4:
        red = 255.0 / 255.0;
        green = 255.0 / 255.0;
        blue = 0.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 5:
        red = 0.0 / 255.0;
        green = 255.0 / 255.0;
        blue = 255.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 6:
        red = 0.0 / 255.0;
        green = 0.0 / 255.0;
        blue = 0.0 / 255.0;
        [self.colorPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
}
[self.eraserBtn setBackgroundImage:[UIImage imageNamed:@"eraser.png"] forState:UIControlStateNormal];
[self.viewThatPoped removeFromSuperview];
self.viewThatPoped = nil;
}
</code></pre>

<p>线条粗细按钮的实现方法类似：</p>

<pre><code>- (void)brushPressed:(id)sender
{

UIButton *btn = (UIButton *)sender;
switch (btn.tag) 
{
    case 0:
        brush = 5.0;
        [self.brushPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
        break;
    case 1:
        brush = 10.0;
        [self.brushPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
    case 2:
        brush = 15.0;
        [self.brushPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
    case 3:
        brush = 20.0;
        [self.brushPickBtn setBackgroundImage:[btn backgroundImageForState:UIControlStateNormal]  forState:UIControlStateNormal];
}
[self.viewThatPoped removeFromSuperview];
self.viewThatPoped = nil;
}
</code></pre>

<p>接下来我们可以简单的测试一下，没问题的话我们进入下一步，也是最重要的一步，在屏幕上实现绘画功能。在我们的代码里添加一下三个方法：</p>

<pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event 
{

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event 
{

}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event 
{

}
</code></pre>

<p>从这三个方法的名字上就能看出来是干什么用的，第一个是当手指触到屏幕是调用，第二个方法是手指在屏幕是移动时调用，第三个是当手指抬起时调用。下面我们把具体的代码加到这三个方法里去（代码中已经添加了详细的注释）：</p>

<pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
fingerMoved = NO;
//通过传进来的touches参数获得一个touch对象，然后通过该对象获得我们touch的坐标
UITouch *touch = [touches anyObject];
lastPoint = [touch locationInView:self.view];
}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
//如果当前有弹出菜单，则不进行绘画操作
if(self.viewThatPoped)
{
    return;
}
fingerMoved = YES;
//获取手指移动后的坐标
UITouch *touch = [touches anyObject];
CGPoint currentPoint = [touch locationInView:self.view];

//开始绘画
//首先获得当前的ImageContext，就是所谓的上下文
UIGraphicsBeginImageContext(self.view.frame.size);
//设定绘画的区域，这里是整个屏幕
[self.drawingImage.image drawInRect:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
//和HTML5中的canvas绘画类似，先移动到lastpoint
CGContextMoveToPoint(UIGraphicsGetCurrentContext(), lastPoint.x, lastPoint.y);
//然后在lastpoint和currentpoint之间画线
CGContextAddLineToPoint(UIGraphicsGetCurrentContext(), currentPoint.x, currentPoint.y);
//设置线的两头的Style，这里设置的是Round，这样会比较好看，我们画出的线条两头都是圆的
CGContextSetLineCap(UIGraphicsGetCurrentContext(), kCGLineCapRound);
//设置线条的宽度，通过参数读取
CGContextSetLineWidth(UIGraphicsGetCurrentContext(), brush);
//设置线条的颜色
CGContextSetRGBStrokeColor(UIGraphicsGetCurrentContext(), red, green, blue, 1.0);
CGContextSetBlendMode(UIGraphicsGetCurrentContext(),kCGBlendModeNormal);
//画出线条
CGContextStrokePath(UIGraphicsGetCurrentContext());
//从当前的上下文里获取图像，并设置到drawingImage上
self.drawingImage.image = UIGraphicsGetImageFromCurrentImageContext();
[self.drawingImage setAlpha:opacity];
//结束绘画
UIGraphicsEndImageContext();
//把lastpoint设置成curentpoint，意味着下次绘画从currentpoint开始
lastPoint = currentPoint;
}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
//如果当前有弹出菜单，则remove掉弹出菜单
if(self.viewThatPoped)
{
    [self.viewThatPoped removeFromSuperview];
    self.viewThatPoped = nil;
    return;
}
//如果手指没有移动，那就画一个点
if(!fingerMoved) {
    UIGraphicsBeginImageContext(self.view.frame.size);
    [self.drawingImage.image drawInRect:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
    CGContextSetLineCap(UIGraphicsGetCurrentContext(), kCGLineCapRound);
    CGContextSetLineWidth(UIGraphicsGetCurrentContext(), brush);
    CGContextSetRGBStrokeColor(UIGraphicsGetCurrentContext(), red, green, blue, opacity);
    CGContextMoveToPoint(UIGraphicsGetCurrentContext(), lastPoint.x, lastPoint.y);
    CGContextAddLineToPoint(UIGraphicsGetCurrentContext(), lastPoint.x, lastPoint.y);
    CGContextStrokePath(UIGraphicsGetCurrentContext());
    CGContextFlush(UIGraphicsGetCurrentContext());
    self.drawingImage.image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
}

//讲drawingImage的内容保存到我们的MainImage里，然后清空drawingImage
UIGraphicsBeginImageContext(self.mainImage.frame.size);
[self.mainImage.image drawInRect:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) blendMode:kCGBlendModeNormal alpha:1.0];
[self.drawingImage.image drawInRect:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) blendMode:kCGBlendModeNormal alpha:opacity];
self.mainImage.image = UIGraphicsGetImageFromCurrentImageContext();
self.drawingImage.image = nil;
UIGraphicsEndImageContext();
}
</code></pre>

<p>接下来我们测试一下效果：<br/>
<img src="http://erica.im/images/my_drawpad/drawtest.jpg"><br/>
下面我们来添加剩下的功能。<br/>
橡皮功能，很简单，其实就是把当前的颜色设置为白色，R,G,B都设置为255就可以了；</p>

<pre><code>-(IBAction)eraserPressed
{
red = 255.0 / 255.0;
green = 255.0 / 255.0;
blue = 255.0 / 255.0;
[self.eraserBtn setBackgroundImage:[UIImage imageNamed:@"eraserpressed.png"] forState:UIControlStateNormal];
} 
</code></pre>

<p>清除所有绘画的功能，也相当的简单，我们使用了一个UIAlertView来让用户确认是否要清楚所有的绘画内容：</p>

<pre><code>- (IBAction)clearBtnPressed
{
UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"" message:@"Are you sure to clear all the drawings?" delegate:self cancelButtonTitle:@"NO" otherButtonTitles:@"YES", nil];
[alert show];
}

//AlertView的delegate方法
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
if (buttonIndex == 1)
{
    //直接设置成nil就可以
    self.mainImage.image = nil;
}
}
</code></pre>

<p>最后一个保存到相册的功能，我们使用了UIActionSheet，来让用户确认，并且在保存成功后回调一个函数来告知用户保存成功：</p>

<pre><code>- (IBAction)saveBtnPressed
{
UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:@""
                                                         delegate:self
                                                cancelButtonTitle:@"Cancel"
                                           destructiveButtonTitle:nil
                                                otherButtonTitles:@"Save to Camera Roll", nil];
[actionSheet showInView:self.view];
}

//actionsheet的delegate方法
- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
if (buttonIndex == 0)
{
    UIGraphicsBeginImageContextWithOptions(_mainImage.bounds.size, NO,0.0);
    [_mainImage.image drawInRect:CGRectMake(0, 0, _mainImage.frame.size.width, _mainImage.frame.size.height)];
    UIImage *SaveImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    UIImageWriteToSavedPhotosAlbum(SaveImage, self,@selector(image:didFinishSavingWithError:contextInfo:), nil);
}
}

//保存完毕后的回调函数
- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo
{
if (error != NULL)
{
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Image could not be saved.Please try again"  delegate:nil cancelButtonTitle:nil otherButtonTitles:@"Close", nil];
    [alert show];
} else {
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Success" message:@"Image was successfully saved in photoalbum!"  delegate:nil cancelButtonTitle:nil otherButtonTitles:@"Close", nil];
    [alert show];
}
}
</code></pre>

<p>接下来我们最后测试一下看看是不是所有的功能都能不出错。如果不出错的话，恭喜，一个简单的iPhone画板应用完成了。
这是整个项目的代码，有需要的请自行<a href="http://erica.im/files/DrawPad.zip">下载</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[维多利亚州立图书馆]]></title>
    <link href="http://erica.im/blog/2012/09/10/state-library/"/>
    <updated>2012-09-10T16:22:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/10/state-library</id>
    <content type="html"><![CDATA[<p>下午去超市，顺路去了州立图书馆晃了一圈。
<img src="http://erica.im/images/state_library/sl1.jpg">
<img src="http://erica.im/images/state_library/sl2.jpg">
<img src="http://erica.im/images/state_library/sl3.jpg">
<img src="http://erica.im/images/state_library/sl4.jpg">
<img src="http://erica.im/images/state_library/sl5.jpg">
<img src="http://erica.im/images/state_library/sl6.jpg"><br/>
这是整个图书馆的中心，一个超级大的大厅
<img src="http://erica.im/images/state_library/sl7.jpg">
<img src="http://erica.im/images/state_library/sl8.jpg">
<img src="http://erica.im/images/state_library/sl9.jpg">
<img src="http://erica.im/images/state_library/sl10.jpg">
<img src="http://erica.im/images/state_library/sl11.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[墨尔本博物馆]]></title>
    <link href="http://erica.im/blog/2012/09/09/melbourne-museeum/"/>
    <updated>2012-09-09T16:33:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/09/melbourne-museeum</id>
    <content type="html"><![CDATA[<p>在刮了两天风下了两天雨之后，今天终于放晴了，就想着不能老这么在家呆着啊，应该走出去晃晃。于是上Google Map搜看看附近有没有什么好玩的地方。不搜不知道，果然隔着两条街就是墨尔本博物馆。这还等什么，吃完中饭马上动身。博物馆坐落在一个很大的公园里，对面就是展览中心，直接上图吧。
<img src="http://erica.im/images/melbourne_museum/mm1.jpg">
<img src="http://erica.im/images/melbourne_museum/mm2.jpg">
<img src="http://erica.im/images/melbourne_museum/mm3.jpg"><br/>
这是博物馆对面的展览中心，看介绍是德国人在1880年墨尔本世博会的时候造的，相当于那个时候的德国馆。但我总觉得这个展览中心看起来象清真寺：
<img src="http://erica.im/images/melbourne_museum/mm4.jpg">
<img src="http://erica.im/images/melbourne_museum/mm5.jpg">
<img src="http://erica.im/images/melbourne_museum/mm6.jpg">
进了博物馆发现正好有个关于美索不达米亚文明的展览，二话不说就买了联票。展览的第一部分就说美索不达米亚平原是文字的发源地，最早能追溯到公元前3500年。中华文明是5000年也就是差不多公元前3000年，那看来确实是他们早。当时的人们虽然刚发明了文字，但是主要的记事方法还是图画，刻在石头上的图画。还真是不得不佩服古文明，5500年前就能在巨大的石板上刻画，还能刻地那么精细。其中最令我震撼的是汉默拉比法典，因为很早就在周杰伦的爱在西元前里听到过。亲眼一看确实NB，一个黑黑的大概两米高的石柱上刻满了当时的文字，然后在石柱顶端是上帝和当时的帝王。介绍上说这个法典大部分条款是遵循一个原则来编写的，就是以牙还牙，以眼还眼。接下来的巴比伦文明展纠正了我犯了20多年的错误，我一直以为咱们的万里长城是世界7大奇迹之一。今天才知道，世界7大奇迹其实早在公元前1000多年的时候就被一个古埃及的学者提出来，所以只包括了当时两河流域的一些宏伟的建筑，就算在那个年代长城早就早好了人家古埃及人也不可能知道。整个展览我都认认真真的看完，确实不错。可惜不准照相，因为很多展品都是真品，平时看不到的。
接下去的现代馆就没什么好说的了，看照片吧。
<img src="http://erica.im/images/melbourne_museum/mm7.jpg">
<img src="http://erica.im/images/melbourne_museum/mm8.jpg">
<img src="http://erica.im/images/melbourne_museum/mm9.jpg">
<img src="http://erica.im/images/melbourne_museum/mm10.jpg">
<img src="http://erica.im/images/melbourne_museum/mm11.jpg">
<img src="http://erica.im/images/melbourne_museum/mm12.jpg">
<img src="http://erica.im/images/melbourne_museum/mm13.jpg">
<img src="http://erica.im/images/melbourne_museum/mm14.jpg">
<img src="http://erica.im/images/melbourne_museum/mm15.jpg"><br/>
接下来是我个人最喜欢的展品，澳洲第一台计算机，也是目前世界上唯一的还能正常运行的第一代计算机。这台计算机叫CSIRAC，建于1949年，1967年退役，占地40平方米相当霸气。运算速度不及现在的普通家庭计算机的百万分之一。
<img src="http://erica.im/images/melbourne_museum/mm16.jpg">
<img src="http://erica.im/images/melbourne_museum/mm17.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用HTML5做了一个简单的画板]]></title>
    <link href="http://erica.im/blog/2012/09/08/my-canvas-using-html5/"/>
    <updated>2012-09-08T22:40:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/08/my-canvas-using-html5</id>
    <content type="html"><![CDATA[<p>感觉死盯着手机开发貌似在澳洲的机会并不多，澳洲最多的还是WEB开发。所以今天就心血来潮的用HTML5现学现卖做了个非常简单的画板，程序写的很简陋也很乱，大家将就着看吧。</p>

<script src="https://gist.github.com/3674531.js"> </script>


<p><a href="http://erica.im/my-canvas">点击这里看效果</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给博客添加新浪微博侧边栏]]></title>
    <link href="http://erica.im/blog/2012/09/07/add-weibo-to-sidebar/"/>
    <updated>2012-09-07T13:26:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/07/add-weibo-to-sidebar</id>
    <content type="html"><![CDATA[<p>今天闲得无聊，就想把博客的内容弄得再丰富一点。<a href="http://octopress.org">Octopress</a>已经提供了丰富的侧边栏widget，比如Twitter，Google Plus，GitHub Repo等等，只需要在<em>config.yml里配置一下用户名就可以了。但是考虑到天朝强大的防火墙的存在，所以我准备把新浪微博的侧边栏给添加进来。<br/>
新浪微博已经提供了可以定制的微博侧边栏叫<a href="http://http://weibo.com/tool/weiboshow">微博秀</a>，这个工具就能够帮我们直接生成一个微博的侧边栏，非常方便。系统会自动给我们生成一个iframe，接下来我们就要把这个iframe添加到我们的博客侧边栏中去。<br/>
首先，在博客所处的本地文件夹中找到source/</em>includes/asides，在这个文件夹下建立weibo.html。用编辑器打开这个文件，然后输入：</p>

<script src="https://gist.github.com/3662995.js"> </script>


<p></p>

<p>其中iframe那块代码就是刚才微博秀给我们生成的代码，不过为了能更方便地通过<em>config.yml来配置，我们用一些变量来替代了原有的值。然后到</em>config.yml中添加如下配置：</p>

<pre><code># Sina Weibo
# 微博uid和verifier，可以在iframe中的src参数里找到
weibo_uid: 2277930531
weibo_verifier: c773826d
# 显示粉丝的行数：1-7行
weibo_fansrow: 1
# 是否显示缩略图
weibo_picshow: true
# 配色方案：新浪提供了1-10种不同的配色方案
weibo_skin: 2
# 是否显示微博内容
weibo_showcontent: true
# 是否在底部显示粉丝栏
weibo_showfans: false
</code></pre>

<p>好了接下来只要generate然后deploy就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[墨尔本随便拍拍]]></title>
    <link href="http://erica.im/blog/2012/09/06/melbourne-street-view/"/>
    <updated>2012-09-06T16:44:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/06/melbourne-street-view</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://erica.im/images/street_view/streetview1.png" width="280" height="210"> 每天的生活很无聊，也就吃饭的时候去city晃晃其他时间就呆在家里研究自己的小学问。中午一路走到唐人街，路上的人那叫一个多，感觉我还是更适应霍巴特的那种乡村生活&#8211;安静，自在。马路上的上班族都是西装笔挺，还好程序员的工作应该不用每天穿西装，不然我肯定浑身不自在。中饭现在每天都去QV的寿司店买两个寿司，5块钱搞定。一会晚上还是去吃楼下那家川菜馆的盖浇饭。晚上继续投简历，争取在生活费花完之前能稳定下来。</p>

<p><img class="left" src="http://erica.im/images/street_view/streetview2.png" width="255" height="340" title="Pipe and shot factory" >
<img class="right" src="http://erica.im/images/street_view/streetview3.png" width="444" height="330" title="State Library" ></p>


<p><img class="left" src="http://erica.im/images/street_view/streetview4.png">
<img class="right" src="http://erica.im/images/street_view/streetview5.png"><br>
<img class="center" src="http://erica.im/images/street_view/streetview6.png"><br>
刚出去买了晚饭，9.5一盒盖浇饭外加一包软饮料，以后天天外面吃了。<br>
<img class="center" src="http://erica.im/images/street_view/dinner.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5分钟掌握Markdown]]></title>
    <link href="http://erica.im/blog/2012/09/06/learn-markdown-in-five-mins/"/>
    <updated>2012-09-06T14:16:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/06/learn-markdown-in-five-mins</id>
    <content type="html"><![CDATA[<h2>Markdown简介：</h2>

<p>一种轻量的标记语言，易读易写，并能将所编写的文本转换成标准化的XHTML（HTML）文本。和一般的标记语言不同，Markdown的语法全都是由标点符号组成，简单易学，因此任何人都能够在5分钟内掌握这门标记语言。废话不多说，让我们马上开始学习Markdown。</p>

<h2>工欲善其事，必先利其器：</h2>

<p>其实任何文本编辑器都可以用来编写Markdown文本，不过我还是要推荐两款个人感觉很不错的编辑器。一个是面向Windows平台的<a href="http://markdownpad.com">Markdownpad</a>，另一个是Mac平台的<a href="http://mouapp.com">Mou</a>。这两款编辑器最大的好处是带有实时预览功能，在左边的编辑器里编写就直接能够在右边的预览里看到效果，非常方便。介绍完编辑器，接下来就正式开始学习Markdown语法。</p>

<h2>Markdown语法：</h2>

<h3>段落和换行</h3>

<p>一个Markdown段落前后必须要有一个以上的空行（空行指没有任何可见字符的行，比如一行只包含空格和制表符，那么该行就是一个空行）。<br/>
如果想要换行的话，只要在换行处输入两个空格然后回车即可。</p>

<h3>标题</h3>

<p>Markdown支持两种标题的语法，这里主要介绍比较简洁的第二种。在行首插入1到6个#就能对应生成HTML中的1到6号标题，比如：</p>

<pre><code># 这是&lt;h1&gt;  
## 这是&lt;h2&gt;  
### 这是&lt;h3&gt;  
</code></pre>

<h3>引用</h3>

<p>Markdown中的引用类似与email中的引用方式，即在每行开头加上>，比如：</p>

<pre><code>&gt;这是第一段这是第一段这是第一段这是第一段  
&gt;这是第一段这是第一段这是第一段
&gt;                        
&gt;这是第二段这是第二段这是第二段这是第二段  
</code></pre>

<p>或者更偷懒一些，只在每段的开头加上>。</p>

<pre><code>&gt;这是第一段这是第一段这是第一段这是第一段  
这是第一段这是第一段这是第一段这是第一段
这是第一段 

&gt;这是第二段这是第二段这是第二段这是第二段
这是第二段这是第二段  
</code></pre>

<p>引用内还可以嵌套引用，只需要根据层次加上不同数量的>：</p>

<pre><code>&gt;第一层引用。  
&gt;&gt;第二层引用。  
&gt;&gt;&gt;第三层引用。  
</code></pre>

<p>另外引用区块内，可以照常使用Markdown的其他语法。</p>

<h3>列表</h3>

<p>Markdown支持有序和无序列表。<br/>
无序列表可以使用*或者+或者-作为标记；</p>

<pre><code>* 第一行  
* 第二行  
* 第三行  
</code></pre>

<p>或者：</p>

<pre><code>+ 第一行
+ 第二行
+ 第三行 
</code></pre>

<p>或者：</p>

<pre><code>- 第一行  
- 第二行  
- 第三行  
</code></pre>

<p>有序列表使用的是一个数字外加一个英文句点”.”：</p>

<pre><code>1. 第一行  
2. 第二行  
3. 第三行  
</code></pre>

<p>列表中的每一个项目都可包含多个段落，每个段落必须缩进4个空格或者一个制表符。如果要在每个列表项中使用引用，那么>符号就需要缩进：</p>

<pre><code>*  列表第一段列表第一段列表第一段。  
   列表第一段 
   列表第二段列表第二段列表第二段     
   列表第二段  
*  列表的另一行  
*  包含引用的项目
   &gt;引用引用引用
</code></pre>

<h3>代码块：</h3>

<p>Markdown的语法提供了很方便的代码区块支持。 只要在要添加代码处加一空行（回车再回车）接着缩进4个空格或是一个制表符即可：</p>

<pre><code>这是普通段落。

    这是代码区块。
    *星号不会被转换
</code></pre>

<p>在代码快里一般的Markdown语法都不会被转换。<br/>
如果仅仅只是想标记行内的一小段代码，那可以用反引号“`”把这小段代码包起来：</p>

<pre><code>这是一句话`这是一段代码`这是另外一句话。
</code></pre>

<h3>强调</h3>

<p>Markdown使用星号&#8221;*&#8221;和下划线&#8221;_&#8221;来标记需要强调的字词：</p>

<pre><code>一个星号和一个下划线代表强调：
*强调强调强调*
_强调强调强调_
两个星号和两个下划线代表强调的程度更深，通常是加粗：
**强调加粗强调加粗**
__强调加粗强调加粗__
</code></pre>

<h3>链接</h3>

<p>Markdown标记链接的方式有两种：<br/>
第一种方法是用方括号[ ]扩起链接的名字，然后紧跟着圆括号中加入网址即可。 如果要显示链接Title，那么在圆括号中的网站之后用双引号把Title包起来即可；</p>

<pre><code>这是一个[链接](http://example.com "Title")。
</code></pre>

<p>第二种方法，不使用圆括号，而是加上另一个方括号并在里面天上用以标识链接的标记。然后在文件任意处定义这个标记的内容；</p>

<pre><code>这是一个[链接][id]。

在文件任意处：
[id]: http://example.com "Title"
</code></pre>

<p>或者偷懒的话，这样也是可以的，把第二个方括号空着，用第一个方括号里的内容标识链接：</p>

<pre><code>这是一个指向[Google][]的链接。

在文件任意处：
[Google]: http://google.com "Google"
</code></pre>

<h3>图片</h3>

<p>标记图片的语法和标记链接的语法颇为相似，也是有两种，第一种：
1. 开头一个惊叹号!
2. 接着一个方括号，里面是图片的替代文字
3. 再接着一个圆括号，里面是图片的网址，可以在网址后用双引号写上图片的&#8221;Title&#8221;</p>

<pre><code>![图片替代文字](http://example.com/image/pic.jpg "title")
或者是相对路径：
![图片替代文字](/image/pic.jpg "title")
</code></pre>

<p>第二种就不详细介绍了，学会链接的第二种方法，这个自然就会了，无非是加了一个感叹号！</p>

<h3>反斜杠 \ 转义</h3>

<p>Markdown允许用反斜杠来插入一些有特殊意义的符号：</p>

<pre><code>在文本中插入星号\*，加号\+，感叹号\!等等
</code></pre>

<h3>结语</h3>

<p>怎么样Markdown是不是很简单，希望大家通过学习都能掌握这门简单易用的标记语言，写出漂亮的网页文本。注：此博客的所有博文都是使用Markdown编写的，大家可以直接从我的github项目里下载到这些博文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[来到墨尔本的第一天]]></title>
    <link href="http://erica.im/blog/2012/09/05/first-day-in-melbourne/"/>
    <updated>2012-09-05T18:51:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/05/first-day-in-melbourne</id>
    <content type="html"><![CDATA[<p>昨天中午，正式离开了霍巴特&#8211;一个我生活学习了三年的小城市，来到了澳洲第二大城市墨尔本，准备在这里开始我人生崭新的篇章。</p>


<p>盗用一下大姐在机场给我拍的照片^^</P>


<p><img src="http://erica.im/images/first_day_in_melbourne/hobart_airport.png"></p>

<p>墨尔本对我来讲并不算一个太陌生的城市，之前已经来过几次，而且墨尔本的街道四四方方很好认，所以出去走走逛逛也肯定不会迷路。住的地方是一幢9层楼的公寓，地处CBD黄金地段，离CBD任何一个角落的距离都不超过30分钟的步行。先来放两张阳台上拍的“美景”吧</p>


<p><img src="http://erica.im/images/first_day_in_melbourne/city1.png">
<img src="http://erica.im/images/first_day_in_melbourne/city2.png"></p>

<p><img class="right" src="http://erica.im/images/first_day_in_melbourne/myroom.png" width="500" height="300">不过黄金地段也有黄金地段的不好，那就是房子太小，一层楼差不多有20户，每户大概都只有30-40平方，我的房间更只有5个平方。在霍巴特住了三年的house，现在一下子搬到这么个狭小的空间，感觉稍稍有点不适应。不过我也不太在意这些，对我来说地段好就可以了，反正也是一个人住，能有个容身之处就足够。家里另外两个室友都是东北的女生，一个88年，一个89年，都是墨尔本大学金融专业的高材生（相比起我们塔斯马尼亚大学，墨大的学生必须都是高材生，哈哈）。这俩东北女孩性格都挺爽朗，都挺好相处的。不过她们几乎白天都不在家，要么上课要么打工。大城市打工的机会很多所以找个兼职很容易，外加高昂的学费，所以几乎所有的留学生都会打零工。</P>


<p><img class="left" src="http://erica.im/images/first_day_in_melbourne/apartment.png" width="500" height="300">接下来来说说墨尔本最让我感到满意的地方&#8212;吃。公寓楼下周边地区到处都是餐馆，不光这些，走路十分钟到市中心，那里的餐馆就更多了。在霍巴特可怜巴巴得挨了三年“饿”，这次来到墨尔本准备把周围的餐馆一家家吃过来，哈哈。更爽的是，下馆子的消费比起霍巴特那是相当的平价了。比如今天，中饭寿司6块钱，晚上一碗盖浇饭加一杯饮料9.5，在霍巴特随便吃点至少要13，4。</p>


<p>再来说说比较郁闷的事儿&#8212;找工作。从差不多两个礼拜前开始网上投简历，到今天差不多投了15份，至今没有任何的回应，看来网投果然不靠谱。生活费大概还能维持两个月，有可能两个月以后我也要去打零工了。大城市IT工作的机会确实不少，但是我钟意的职位却不多，大部分都是WEB开发，手机开发的职位要么就是需要有2年以上从业经验的，要么就干脆开高薪聘请项目经理，像我这种刚毕业的学生想做手机开发几乎是没有机会的。所以我要开始考虑是不是要转行做WEB，或者我还有个更疯狂的想法，混一年以后拿个澳洲国籍然后去美国找工作，我相信美国才是程序员的天堂。</p>


<p>最后来说说这个博客，我不是一个喜欢写博客的人，但是我当我发现了我现在所用的这个博客框架后我要开始改变这种想法了，因为突然发现原来还可以用编程的方式来写博客。所以这个博客我会经常更新，发表一些日记或者编程上的心得。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first article]]></title>
    <link href="http://erica.im/blog/2012/09/05/my-first-article/"/>
    <updated>2012-09-05T17:02:00+10:00</updated>
    <id>http://erica.im/blog/2012/09/05/my-first-article</id>
    <content type="html"><![CDATA[<p>This is my very first article posted on my <a href="http://octopress.org">Octopress</a> blog which is running on <a href="http://github.com/qianshijia/qianshijia.github.com">GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
